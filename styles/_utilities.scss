//Utility functions

$font-em-base: 14 !default;

$breakpoint-s: 0em !default;
$breakpoint-m: 48em !default;   //  768px
$breakpoint-l: 60em !default;   //  960px
$breakpoint-xl: 72em !default;  // 1152px
$breakpoint-xxl: 84em !default; // 1344px


// TODO: Change to EM breakpoints
@mixin breakpoint($point) {
	// 16px baseline (256px) s = small
	@if $point == s {
		@media (min-width: $breakpoint-s) { @content; }
	}	// 16px baseline (256px - 767px) s-m = small TO medium
	@else if $point == s-m {
		@media (min-width:$breakpoint-s) and (max-width:$breakpoint-m - 0.1em)  { @content; }
	}
	// 16px baseline (256px - 959px) s-l = small TO large
	@else if $point == s-l {
		@media (min-width:$breakpoint-s) and (max-width:$breakpoint-l - 0.1em)  { @content; }
	}
	@else if $point == s-xl {
		@media (min-width:$breakpoint-s) and (max-width:$breakpoint-xl - 0.1em)  { @content; }
	}
	// 16px baseline (768px) m = medium
	@else if $point == m {
		@media (min-width: $breakpoint-m) { @content; }
	}
	// 16px baseline (768px - 959px) m-l = medium TO large
	@else if $point == m-l {
		@media (min-width:$breakpoint-m) and (max-width:$breakpoint-l - 0.1em)  { @content; }
	}
	// 16px baseline (768px - 1152) m-l = medium TO xlarge
	@else if $point == m-xl {
		@media (min-width:$breakpoint-m) and (max-width:$breakpoint-xl - 0.1em)  { @content; }
	}
	// 16px baseline (960px) l = large
	@else if $point == l {
		@media (min-width: $breakpoint-l) { @content; }
	}
	@else if $point == l2x {
		@media
			(-webkit-min-device-pixel-ratio: 2) and (min-width: $breakpoint-l),
			(   min--moz-device-pixel-ratio: 2) and (min-width: $breakpoint-l),
			(     -o-min-device-pixel-ratio: 2/1) and (min-width: $breakpoint-l),
			(        min-device-pixel-ratio: 2) and (min-width: $breakpoint-l),
			(                min-resolution: 192dpi) and (min-width: $breakpoint-l),
			(                min-resolution: 2dppx) and (min-width: $breakpoint-l) {
				@content;
			}
	}
	// 16px baseline (1152px) lx = extra large
	@else if $point == xl {
		@media (min-width: $breakpoint-xl) { @content; }
	}
	@else if $point == xl2x {
		@media
			(-webkit-min-device-pixel-ratio: 2) and (min-width: $breakpoint-xl),
			(   min--moz-device-pixel-ratio: 2) and (min-width: $breakpoint-xl),
			(     -o-min-device-pixel-ratio: 2/1) and (min-width: $breakpoint-xl),
			(        min-device-pixel-ratio: 2) and (min-width: $breakpoint-xl),
			(                min-resolution: 192dpi) and (min-width: $breakpoint-xl),
			(                min-resolution: 2dppx) and (min-width: $breakpoint-xl) {
				@content;
			}
	}
	@else if $point == xxl {
		@media (min-width: $breakpoint-xxl) { @content; }
	}
	@else if $point == xxl2x {
		@media
			(-webkit-min-device-pixel-ratio: 2) and (min-width: $breakpoint-xxl),
			(   min--moz-device-pixel-ratio: 2) and (min-width: $breakpoint-xxl),
			(     -o-min-device-pixel-ratio: 2/1) and (min-width: $breakpoint-xxl),
			(        min-device-pixel-ratio: 2) and (min-width: $breakpoint-xxl),
			(                min-resolution: 192dpi) and (min-width: $breakpoint-xxl),
			(                min-resolution: 2dppx) and (min-width: $breakpoint-xxl) {
				@content;
			}
	}
}

// Material Design Shadows

/**
 * Computes a top-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
 * Computes a bottom-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
 * Gives a card depth effect.
 *
 * @param {Number} $depth - depth level (between 1 and 5)
 *
 * @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
 *
 * @requires {function} top-shadow
 * @requires {function} bottom-shadow
 */
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}
